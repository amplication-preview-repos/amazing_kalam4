/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DonateService } from "../donate.service";
import { DonateCreateInput } from "./DonateCreateInput";
import { Donate } from "./Donate";
import { DonateFindManyArgs } from "./DonateFindManyArgs";
import { DonateWhereUniqueInput } from "./DonateWhereUniqueInput";
import { DonateUpdateInput } from "./DonateUpdateInput";
import { DonateToStreamerDto } from "../DonateToStreamerDto";

export class DonateControllerBase {
  constructor(protected readonly service: DonateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Donate })
  async createDonate(@common.Body() data: DonateCreateInput): Promise<Donate> {
    return await this.service.createDonate({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        streamerId: true,
        amount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Donate] })
  @ApiNestedQuery(DonateFindManyArgs)
  async donates(@common.Req() request: Request): Promise<Donate[]> {
    const args = plainToClass(DonateFindManyArgs, request.query);
    return this.service.donates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        streamerId: true,
        amount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Donate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async donate(
    @common.Param() params: DonateWhereUniqueInput
  ): Promise<Donate | null> {
    const result = await this.service.donate({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        streamerId: true,
        amount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Donate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDonate(
    @common.Param() params: DonateWhereUniqueInput,
    @common.Body() data: DonateUpdateInput
  ): Promise<Donate | null> {
    try {
      return await this.service.updateDonate({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          streamerId: true,
          amount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Donate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDonate(
    @common.Param() params: DonateWhereUniqueInput
  ): Promise<Donate | null> {
    try {
      return await this.service.deleteDonate({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          streamerId: true,
          amount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/donate_to_streamer")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DonateToStreamer(
    @common.Body()
    body: DonateToStreamerDto
  ): Promise<string> {
    return this.service.DonateToStreamer(body);
  }
}
