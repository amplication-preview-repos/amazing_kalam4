/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Donate } from "./Donate";
import { DonateCountArgs } from "./DonateCountArgs";
import { DonateFindManyArgs } from "./DonateFindManyArgs";
import { DonateFindUniqueArgs } from "./DonateFindUniqueArgs";
import { CreateDonateArgs } from "./CreateDonateArgs";
import { UpdateDonateArgs } from "./UpdateDonateArgs";
import { DeleteDonateArgs } from "./DeleteDonateArgs";
import { DonateToStreamerDto } from "../DonateToStreamerDto";
import { DonateService } from "../donate.service";
@graphql.Resolver(() => Donate)
export class DonateResolverBase {
  constructor(protected readonly service: DonateService) {}

  async _donatesMeta(
    @graphql.Args() args: DonateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Donate])
  async donates(@graphql.Args() args: DonateFindManyArgs): Promise<Donate[]> {
    return this.service.donates(args);
  }

  @graphql.Query(() => Donate, { nullable: true })
  async donate(
    @graphql.Args() args: DonateFindUniqueArgs
  ): Promise<Donate | null> {
    const result = await this.service.donate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Donate)
  async createDonate(@graphql.Args() args: CreateDonateArgs): Promise<Donate> {
    return await this.service.createDonate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Donate)
  async updateDonate(
    @graphql.Args() args: UpdateDonateArgs
  ): Promise<Donate | null> {
    try {
      return await this.service.updateDonate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Donate)
  async deleteDonate(
    @graphql.Args() args: DeleteDonateArgs
  ): Promise<Donate | null> {
    try {
      return await this.service.deleteDonate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async DonateToStreamer(
    @graphql.Args()
    args: DonateToStreamerDto
  ): Promise<string> {
    return this.service.DonateToStreamer(args);
  }
}
