/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Donate as PrismaDonate } from "@prisma/client";
import { DonateToStreamerDto } from "../DonateToStreamerDto";

export class DonateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DonateCountArgs, "select">): Promise<number> {
    return this.prisma.donate.count(args);
  }

  async donates(args: Prisma.DonateFindManyArgs): Promise<PrismaDonate[]> {
    return this.prisma.donate.findMany(args);
  }
  async donate(
    args: Prisma.DonateFindUniqueArgs
  ): Promise<PrismaDonate | null> {
    return this.prisma.donate.findUnique(args);
  }
  async createDonate(args: Prisma.DonateCreateArgs): Promise<PrismaDonate> {
    return this.prisma.donate.create(args);
  }
  async updateDonate(args: Prisma.DonateUpdateArgs): Promise<PrismaDonate> {
    return this.prisma.donate.update(args);
  }
  async deleteDonate(args: Prisma.DonateDeleteArgs): Promise<PrismaDonate> {
    return this.prisma.donate.delete(args);
  }
  async DonateToStreamer(args: DonateToStreamerDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
