/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Stream as PrismaStream } from "@prisma/client";
import { StartStreamDto } from "../StartStreamDto";

export class StreamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StreamCountArgs, "select">): Promise<number> {
    return this.prisma.stream.count(args);
  }

  async streams(args: Prisma.StreamFindManyArgs): Promise<PrismaStream[]> {
    return this.prisma.stream.findMany(args);
  }
  async stream(
    args: Prisma.StreamFindUniqueArgs
  ): Promise<PrismaStream | null> {
    return this.prisma.stream.findUnique(args);
  }
  async createStream(args: Prisma.StreamCreateArgs): Promise<PrismaStream> {
    return this.prisma.stream.create(args);
  }
  async updateStream(args: Prisma.StreamUpdateArgs): Promise<PrismaStream> {
    return this.prisma.stream.update(args);
  }
  async deleteStream(args: Prisma.StreamDeleteArgs): Promise<PrismaStream> {
    return this.prisma.stream.delete(args);
  }
  async StartStream(args: StartStreamDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
